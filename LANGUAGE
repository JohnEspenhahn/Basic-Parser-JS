BASIC Programming Language
Version: 1.0.0
Creator: John Espenhahn

=== BASIC SYNTAX ================================================================
  * The ';' at the end of lines is required
  
  

=== COMPILATION =================================================================
  * To enter terminal mode pass '-t' as a command line parameter to the compiler
  * If no parameters are passed a file selector will be opened
  * The compiled code will be printed to the terminal screen
  
  * While complex expressions are handled, it is recommended to keep expressions
    as simple as possible so they can be efficiently optimized.

  EX] java -jar "BASIC Compiler.jar"
  EX] java -jar "BASIC Compiler.jar" -t
  
  
  
=== VARIABLES ===================================================================
  TYPES:
    uint, bool, array, string, func
    
    * As of version 1.0.0 all 'integers' are unsigned 16-bit integers. Because of
      this use subtractions with caution, it may be better to use addition with a
      two's compliment negative number. 
        Convert: "65536 - (a number from 1 to 32767 inclusive)"
        Example: "i -= 2;" => "i += 65534"
    
    
  DEFINING:
    uint <identifier>;
      * defines an integer with default value 0
    
    uint <identifier> = <expression>;
      * defines an integer and assigns evaluated expression
        
    * The following are valid short-hands for uints:
        <identifier> += <expression>;
        <identifier> -= <expression>;
        <identifier> *= <expression>;
        <identifier> /= <expression>;
      
      
    bool <identifier> = <true/false>;
      * you can use bitwise as well (&,|,^)
      
      
    array <identifier> = alloc(<size>);
      * Creates an array on heap of size <size>
      * Use dealloc(<identifier&gt) to free the memory
    
    string <identifier> = "a string";
      * By default strings are stored in the global memory area, not heap
      * Strings on the global memory area can't be deallocated
      
    * For both arrays and string, this expression
      will have 'a' and 'b' reference the same memory
        EX] string a = "test", b = a;
        
        
  GLOBAL:
    global <standard_var_definition>
      * Must be defined in outer body (not within a function or struct)
      * Can be accessed from any block
      * Accessing is slower
        EX] global uint i = 5;

    

=== Casting =====================================================================
  <type>: <object_to_cast>

  * Cast an object between two similar/inherited classes
    EX] bool i = bool: 5;


    
=== CONDITIONAL BLOCKS ==========================================================
  * Simple logical operations are handled (&, |)

  if <expression> <bool_op> <expression> {
    <body>
  }
  
  while <expression> <bool_op> <expression> {
    <body>
  }
  
  
  
=== FUNCTIONS ===================================================================
  <identifier> <type1> <identifier1>, <type2> <identifier2>... -> <return type> {
    <body>
  }
  
  EX] 
    sum uint a, uint b, uint c -> uint { 
      return a + b + c;
    }
   
    square uint i -> uint {
      return i * i;
    }
    
    
    
=== STRUCT ======================================================================
  struct <identifier> {
    <type1> <identifier1>;
    <type2> <identifier2>, <identifier3>;
    ...
  }
  
  * Must be instantiated with 'new' before it can be accessed, failing to do so
    will not always be caught by the compiler, and can cause major issues.
  * Can be dealloced with 'delte'
  
  EX]
    struct Point {
    	int x;
    	int y;
    }
    
    Point p = new Point();
    p.x = 1;
    delete p;



=== IMPORT ======================================================================
  * Libraries and be imported with the 'import' command
  
  EX]
    import com.hahn.io;
    
    
    
=== SAMPLE CODE =================================================================

  HELLO WORLD:
    import com.hahn.io;
    initIO();
    println("Hello World");
