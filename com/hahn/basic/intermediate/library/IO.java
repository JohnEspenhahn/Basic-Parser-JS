package com.hahn.basic.intermediate.library;

import static com.hahn.basic.intermediate.opcode.OPCode.ADD;
import static com.hahn.basic.intermediate.opcode.OPCode.BOR;
import static com.hahn.basic.intermediate.opcode.OPCode.DIV;
import static com.hahn.basic.intermediate.opcode.OPCode.HWI;
import static com.hahn.basic.intermediate.opcode.OPCode.IAS;
import static com.hahn.basic.intermediate.opcode.OPCode.IFE;
import static com.hahn.basic.intermediate.opcode.OPCode.IFG;
import static com.hahn.basic.intermediate.opcode.OPCode.IFL;
import static com.hahn.basic.intermediate.opcode.OPCode.IFM;
import static com.hahn.basic.intermediate.opcode.OPCode.IFN;
import static com.hahn.basic.intermediate.opcode.OPCode.IFP;
import static com.hahn.basic.intermediate.opcode.OPCode.JSR;
import static com.hahn.basic.intermediate.opcode.OPCode.MOD;
import static com.hahn.basic.intermediate.opcode.OPCode.MOV;
import static com.hahn.basic.intermediate.opcode.OPCode.MUL;
import static com.hahn.basic.intermediate.opcode.OPCode.POPA;
import static com.hahn.basic.intermediate.opcode.OPCode.PUSHA;
import static com.hahn.basic.intermediate.opcode.OPCode.RFI;
import static com.hahn.basic.intermediate.opcode.OPCode.SET;
import static com.hahn.basic.intermediate.opcode.OPCode.SPA;
import static com.hahn.basic.intermediate.opcode.OPCode.SUB;
import static com.hahn.basic.intermediate.opcode.PreprocessorDirective.CONST;
import static com.hahn.basic.intermediate.register.Register.A;
import static com.hahn.basic.intermediate.register.Register.B;
import static com.hahn.basic.intermediate.register.Register.C;
import static com.hahn.basic.intermediate.register.Register.EX;
import static com.hahn.basic.intermediate.register.Register.PC;
import static com.hahn.basic.intermediate.register.Register.POP;
import static com.hahn.basic.intermediate.register.Register.PUSH;
import static com.hahn.basic.intermediate.register.Register.XH;
import static com.hahn.basic.intermediate.register.Register.XL;
import static com.hahn.basic.intermediate.register.Register.YL;

import com.hahn.basic.intermediate.library.base.Library;
import com.hahn.basic.intermediate.objects.types.ParameterizedType;
import com.hahn.basic.intermediate.objects.types.Type;
import com.hahn.basic.intermediate.register.StackRegisterSnapshot;
import com.hahn.basic.target.LangBuildTarget;
import com.hahn.basic.target.asm.raw.ASMCommand;
import com.hahn.basic.target.asm.raw.ASMInlineLabel;
import com.hahn.basic.target.asm.raw.ASMLabel;
import com.hahn.basic.target.asm.raw.ASMLiteral;
import com.hahn.basic.target.asm.raw.ASMPointer;
import com.hahn.basic.target.asm.raw.ASMSpecial;

public class IO extends Library {

    public IO() {
        super("com.hahn.io");
    }

    @Override
    public void define() {
        Library.defineFunc("initIO",      Type.VOID);
        Library.defineFunc("clearScreen", Type.VOID);
        Library.defineFunc("moveCursor",  Type.VOID, new Type[] { Type.UINT, Type.UINT });
        Library.defineFunc("loadCursorX", Type.UINT);
        Library.defineFunc("loadCursorY", Type.UINT);
        Library.defineFunc("scrollUp",    Type.VOID);
        Library.defineFunc("newLine",     Type.VOID);
        Library.defineFunc("print",       Type.VOID, new Type[] { Type.ARRAY });
        Library.defineFunc("print",       Type.VOID, new Type[] { Type.STRING });
        Library.defineFunc("print",       Type.VOID, new Type[] { Type.BOOL });
        Library.defineFunc("print",       Type.VOID, new Type[] { Type.UINT });
        Library.defineFunc("print",       Type.VOID, new Type[] { Type.UINT, Type.BOOL });
        Library.defineFunc("print",       Type.VOID, new Type[] { Type.CHAR });
        Library.defineFunc("println",     Type.VOID, new Type[] { Type.ARRAY });
        Library.defineFunc("println",     Type.VOID, new Type[] { Type.STRING });
        Library.defineFunc("println",     Type.VOID, new Type[] { Type.BOOL });
        Library.defineFunc("println",     Type.VOID, new Type[] { Type.UINT });
        Library.defineFunc("println",     Type.VOID, new Type[] { Type.UINT, Type.BOOL });
        Library.defineFunc("println",     Type.VOID, new Type[] { Type.CHAR });
        
        Library.defineFunc("setKeyCallback"  , Type.VOID, new Type[] { new ParameterizedType<Type>(Type.FUNC, new Type[0]) });
        Library.defineFunc("clearKeyCallback", Type.VOID);
        Library.defineFunc("clearKeyBuffer"  , Type.VOID);
        Library.defineFunc("loadKey"         , Type.UINT);
        Library.defineFunc("isKeyDown"       , Type.BOOL, new Type[] { Type.UINT });
        Library.defineFunc("isKeyDown"       , Type.BOOL, new Type[] { Type.CHAR });
        
        Library.defineProperty("com.hahn.io.NextPrint");
        Library.defineProperty("com.hahn.io.PacketHandler");
        Library.defineProperty("com.hahn.io.KeyHandler");
        Library.defineProperty("com.hahn.io.TimeoutAddress");
        Library.defineProperty("com.hahn.io.TimeoutTicks");
        Library.defineString("true");
        Library.defineString("false");
    }
    
    @Override
    public void defineASM(LangBuildTarget b) {
        ASMSpecial.toBytecode(b, CONST, "com.hahn.io.SCREEN_START", 0x7DFF);
        ASMSpecial.toBytecode(b, CONST, "com.hahn.io.SCREEN_END", 0x7F7F);
        ASMLabel.add("@func_initIO", b);
        ASMCommand.toBytecode(b, PUSHA);
        ASMCommand.toBytecode(b, IAS, new ASMInlineLabel("@func_HardwareInterrupt"));
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, SET, B, new ASMInlineLabel("com.hahn.io.SCREEN_START"));
        ASMCommand.toBytecode(b, HWI, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, JSR, new ASMInlineLabel("@func_clearScreen"));
        ASMCommand.toBytecode(b, POPA);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_clearScreen", b);
        ASMCommand.toBytecode(b, PUSHA);
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")), new ASMInlineLabel("com.hahn.io.SCREEN_START"));
        ASMCommand.toBytecode(b, SET, A, new ASMInlineLabel("com.hahn.io.SCREEN_START"));
        ASMCommand.toBytecode(b, SET, B, new ASMInlineLabel("com.hahn.io.SCREEN_END"));
        ASMLabel.add("@func_clearScreen@loop", b);
        ASMCommand.toBytecode(b, SET, new ASMPointer(A), new ASMLiteral(0x1920));
        ASMCommand.toBytecode(b, ADD, A, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, IFL, A, B);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_clearScreen@loop"));
        ASMCommand.toBytecode(b, POPA);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_moveCursor@uint@uint", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new StackRegisterSnapshot(1)));
        ASMCommand.toBytecode(b, MUL, A, ASMLiteral.THIRTYTWO);
        ASMCommand.toBytecode(b, ADD, A, new ASMPointer(new StackRegisterSnapshot(2)));
        ASMCommand.toBytecode(b, ADD, A, new ASMInlineLabel("com.hahn.io.SCREEN_START"));
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")), A);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_loadCursorX", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")));
        ASMCommand.toBytecode(b, SUB, A, new ASMInlineLabel("com.hahn.io.SCREEN_START"));
        ASMCommand.toBytecode(b, MOD, A, ASMLiteral.THIRTYTWO);
        ASMCommand.toBytecode(b, SET, EX, A);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_loadCursorY", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")));
        ASMCommand.toBytecode(b, SUB, A, new ASMInlineLabel("com.hahn.io.SCREEN_START"));
        ASMCommand.toBytecode(b, DIV, A, ASMLiteral.THIRTYTWO);
        ASMCommand.toBytecode(b, SET, EX, A);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_scrollUp", b);
        ASMCommand.toBytecode(b, PUSHA);
        ASMCommand.toBytecode(b, SUB, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")), ASMLiteral.THIRTYTWO);
        ASMCommand.toBytecode(b, SET, A, new ASMInlineLabel("com.hahn.io.SCREEN_START"));
        ASMCommand.toBytecode(b, SET, B, new ASMInlineLabel("com.hahn.io.SCREEN_END"));
        ASMCommand.toBytecode(b, SUB, B, ASMLiteral.THIRTYTWO);
        ASMLabel.add("@func_scrollUp@loop", b);
        ASMCommand.toBytecode(b, SET, C, A);
        ASMCommand.toBytecode(b, ADD, C, ASMLiteral.THIRTYTWO);
        ASMCommand.toBytecode(b, SET, new ASMPointer(A), new ASMPointer(C));
        ASMCommand.toBytecode(b, SET, new ASMPointer(C), new ASMLiteral(0x1920));
        ASMCommand.toBytecode(b, ADD, A, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, IFM, A, B);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_scrollUp@loop"));
        ASMCommand.toBytecode(b, POPA);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_newLine", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, PUSH, B);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")));
        ASMCommand.toBytecode(b, SET, B, new ASMInlineLabel("com.hahn.io.SCREEN_START"));
        ASMLabel.add("@func_newLine@find", b);
        ASMCommand.toBytecode(b, ADD, B, ASMLiteral.THIRTYTWO);
        ASMCommand.toBytecode(b, IFG, B, A);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_newLine@scroll"));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_newLine@find"));
        ASMLabel.add("@func_newLine@scroll", b);
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")), B);
        ASMCommand.toBytecode(b, IFP, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")), new ASMInlineLabel("com.hahn.io.SCREEN_END"));
        ASMCommand.toBytecode(b, JSR, new ASMInlineLabel("@func_scrollUp"));
        ASMCommand.toBytecode(b, SET, B, POP);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_println@char", b);
        ASMCommand.toBytecode(b, SET, EX, POP);
        ASMCommand.toBytecode(b, SET, PUSH, new ASMInlineLabel("@func_newLine"));
        ASMCommand.toBytecode(b, SET, PUSH, EX);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@char"));
        ASMLabel.add("@func_println@bool", b);
        ASMCommand.toBytecode(b, SET, EX, POP);
        ASMCommand.toBytecode(b, SET, PUSH, new ASMInlineLabel("@func_newLine"));
        ASMCommand.toBytecode(b, SET, PUSH, EX);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@bool"));
        ASMLabel.add("@func_println@uint", b);
        ASMCommand.toBytecode(b, SET, PUSH, ASMLiteral.ZERO);
        ASMLabel.add("@func_println@uint@bool", b);
        ASMCommand.toBytecode(b, SET, PUSH, new ASMInlineLabel("@func_println@uint@bool_newLine"));
        ASMCommand.toBytecode(b, SET, PUSH, new ASMPointer(new StackRegisterSnapshot(2)));
        ASMCommand.toBytecode(b, SET, PUSH, new ASMPointer(new StackRegisterSnapshot(2)));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@uint@bool"));
        ASMLabel.add("@func_println@uint@bool_newLine", b);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_newLine"));
        ASMLabel.add("@func_println@string", b);
        ASMLabel.add("@func_println@array", b);
        ASMCommand.toBytecode(b, SET, EX, POP);
        ASMCommand.toBytecode(b, SET, PUSH, new ASMInlineLabel("@func_newLine"));
        ASMCommand.toBytecode(b, SET, PUSH, EX);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@array"));
        ASMLabel.add("@func_print@bool", b);
        ASMCommand.toBytecode(b, SET, EX, POP);
        ASMCommand.toBytecode(b, IFE, EX, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@bool@print_false"));
        ASMCommand.toBytecode(b, SET, PUSH, new ASMInlineLabel("@str_74727565"));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@string"));
        ASMLabel.add("@func_print@bool@print_false", b);
        ASMCommand.toBytecode(b, SET, PUSH, new ASMInlineLabel("@str_66616c7365"));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@string"));
        ASMLabel.add("@func_print@uint", b);
        ASMCommand.toBytecode(b, SET, PUSH, ASMLiteral.ZERO);
        ASMLabel.add("@func_print@uint@bool", b);
        ASMCommand.toBytecode(b, PUSHA);
        ASMCommand.toBytecode(b, SET, YL, new ASMPointer(new StackRegisterSnapshot(8)));
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new StackRegisterSnapshot(9)));
        ASMCommand.toBytecode(b, SET, B, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")));
        ASMCommand.toBytecode(b, SET, C, new ASMLiteral(10000));
        ASMLabel.add("@func_print@uint@loop", b);
        ASMCommand.toBytecode(b, SET, XL, A);
        ASMCommand.toBytecode(b, DIV, XL, C);
        ASMCommand.toBytecode(b, IFE, YL, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, IFE, XL, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, IFN, C, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@uint@prep_loop"));
        ASMCommand.toBytecode(b, SET, YL, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, XH, XL);
        ASMCommand.toBytecode(b, BOR, XH, new ASMLiteral(0x1930));
        ASMCommand.toBytecode(b, SET, new ASMPointer(B), XH);
        ASMCommand.toBytecode(b, MUL, XL, C);
        ASMCommand.toBytecode(b, SUB, A, XL);
        ASMCommand.toBytecode(b, ADD, B, ASMLiteral.ONE);
        ASMLabel.add("@func_print@uint@prep_loop", b);
        ASMCommand.toBytecode(b, DIV, C, new ASMLiteral(10));
        ASMCommand.toBytecode(b, IFG, C, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@uint@loop"));
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")), B);
        ASMCommand.toBytecode(b, POPA);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_print@char", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, PUSH, B);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new StackRegisterSnapshot(2)));
        ASMCommand.toBytecode(b, SET, B, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")));
        ASMCommand.toBytecode(b, BOR, A, new ASMLiteral(0x1900));
        ASMCommand.toBytecode(b, SET, new ASMPointer(B), A);
        ASMCommand.toBytecode(b, ADD, B, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")), B);
        ASMCommand.toBytecode(b, SET, B, POP);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_print@string", b);
        ASMLabel.add("@func_print@array", b);
        ASMCommand.toBytecode(b, PUSHA);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new StackRegisterSnapshot(8)));
        ASMCommand.toBytecode(b, SET, B, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")));
        ASMCommand.toBytecode(b, SET, C, new ASMPointer(A));
        ASMCommand.toBytecode(b, ADD, C, A);
        ASMCommand.toBytecode(b, ADD, A, ASMLiteral.ONE);
        ASMLabel.add("@func_print@array@loop", b);
        ASMCommand.toBytecode(b, IFG, A, C);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@array@end"));
        ASMCommand.toBytecode(b, SET, XL, new ASMPointer(A));
        ASMCommand.toBytecode(b, BOR, XL, new ASMLiteral(0x1900));
        ASMCommand.toBytecode(b, SET, new ASMPointer(B), XL);
        ASMCommand.toBytecode(b, ADD, A, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, ADD, B, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_print@array@loop"));
        ASMLabel.add("@func_print@array@end", b);
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.NextPrint")), B);
        ASMCommand.toBytecode(b, POPA);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_setKeyCallback@func<@@undefined>", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, PUSH, B);
        ASMCommand.toBytecode(b, SET, A, new ASMLiteral(3));
        ASMCommand.toBytecode(b, SET, B, new ASMPointer(new StackRegisterSnapshot(2)));
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.KeyHandler")), B);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, B, POP);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_clearKeyCallback", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, PUSH, B);
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.KeyHandler")), ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, A, new ASMLiteral(3));
        ASMCommand.toBytecode(b, SET, B, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, B, POP);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_clearKeyBuffer", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_loadKey", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, PUSH, C);
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, EX, C);
        ASMCommand.toBytecode(b, SET, C, POP);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_isKeyDown@uint", b);
        ASMLabel.add("@func_isKeyDown@char", b);
        ASMCommand.toBytecode(b, PUSHA);
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, SET, B, new ASMPointer(new StackRegisterSnapshot(8)));
        ASMCommand.toBytecode(b, HWI, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, EX, C);
        ASMCommand.toBytecode(b, POPA);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_setPacketCallback@func<@@undefined>", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, PUSH, B);
        ASMCommand.toBytecode(b, SET, B, new ASMPointer(new StackRegisterSnapshot(2)));
        ASMCommand.toBytecode(b, SET, A, new ASMLiteral(0xC));
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.PacketHandler")), B);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.FOUR);
        ASMCommand.toBytecode(b, SET, B, POP);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_clearPacketCallback", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, PUSH, B);
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.PacketHandler")), ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, SET, A, new ASMLiteral(0xB));
        ASMCommand.toBytecode(b, HWI, ASMLiteral.FOUR);
        ASMCommand.toBytecode(b, SET, A, new ASMLiteral(0xC));
        ASMCommand.toBytecode(b, SET, B, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.FOUR);
        ASMCommand.toBytecode(b, SET, B, POP);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_setTimeout@uint@func<@@undefined>", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, PUSH, B);
        ASMCommand.toBytecode(b, SET, B, new ASMPointer(new StackRegisterSnapshot(2)));
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.TimeoutAddress")), B);
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.TimeoutTicks")), new ASMPointer(new StackRegisterSnapshot(3)));
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, SET, B, new ASMLiteral(60));
        ASMCommand.toBytecode(b, HWI, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, SET, B, POP);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("&com.hahn.io.DoTimeout", b);
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, IFL, C, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.TimeoutTicks")));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("&com.hahn.io.DoTimeout@not_yet"));
        ASMCommand.toBytecode(b, SET, EX, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.TimeoutAddress")));
        ASMCommand.toBytecode(b, JSR, new ASMInlineLabel("@func_clearTimeout"));
        ASMCommand.toBytecode(b, JSR, EX);
        ASMLabel.add("&com.hahn.io.DoTimeout@not_yet", b);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_clearTimeout", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, PUSH, B);
        ASMCommand.toBytecode(b, SET, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.TimeoutAddress")), ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, SET, B, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, SET, B, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, HWI, ASMLiteral.TWO);
        ASMCommand.toBytecode(b, SET, B, POP);
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_HardwareInterrupt", b);
        ASMCommand.toBytecode(b, IFE, A, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, RFI, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, IFE, A, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.KeyHandler")));
        ASMCommand.toBytecode(b, JSR, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.KeyHandler")));
        ASMCommand.toBytecode(b, IFE, A, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.PacketHandler")));
        ASMCommand.toBytecode(b, JSR, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.PacketHandler")));
        ASMCommand.toBytecode(b, IFE, A, new ASMPointer(new ASMInlineLabel("@global_com.hahn.io.TimeoutAddress")));
        ASMCommand.toBytecode(b, JSR, new ASMInlineLabel("&com.hahn.io.DoTimeout"));
        ASMCommand.toBytecode(b, RFI, ASMLiteral.ZERO);
    }
}
