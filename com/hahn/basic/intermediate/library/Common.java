package com.hahn.basic.intermediate.library;

import static com.hahn.basic.intermediate.opcode.OPCode.ADD;
import static com.hahn.basic.intermediate.opcode.OPCode.AND;
import static com.hahn.basic.intermediate.opcode.OPCode.BOR;
import static com.hahn.basic.intermediate.opcode.OPCode.IFE;
import static com.hahn.basic.intermediate.opcode.OPCode.IFG;
import static com.hahn.basic.intermediate.opcode.OPCode.IFL;
import static com.hahn.basic.intermediate.opcode.OPCode.IFN;
import static com.hahn.basic.intermediate.opcode.OPCode.IFP;
import static com.hahn.basic.intermediate.opcode.OPCode.MOV;
import static com.hahn.basic.intermediate.opcode.OPCode.POPA;
import static com.hahn.basic.intermediate.opcode.OPCode.PUSHA;
import static com.hahn.basic.intermediate.opcode.OPCode.SET;
import static com.hahn.basic.intermediate.opcode.OPCode.SHL;
import static com.hahn.basic.intermediate.opcode.OPCode.SHR;
import static com.hahn.basic.intermediate.opcode.OPCode.SPA;
import static com.hahn.basic.intermediate.opcode.OPCode.SUB;
import static com.hahn.basic.intermediate.opcode.OPCode.XOR;
import static com.hahn.basic.intermediate.opcode.PreprocessorDirective.CONST;
import static com.hahn.basic.intermediate.register.Register.A;
import static com.hahn.basic.intermediate.register.Register.B;
import static com.hahn.basic.intermediate.register.Register.C;
import static com.hahn.basic.intermediate.register.Register.EX;
import static com.hahn.basic.intermediate.register.Register.I;
import static com.hahn.basic.intermediate.register.Register.PC;
import static com.hahn.basic.intermediate.register.Register.POP;
import static com.hahn.basic.intermediate.register.Register.PUSH;
import static com.hahn.basic.intermediate.register.Register.XH;
import static com.hahn.basic.intermediate.register.Register.XL;
import static com.hahn.basic.intermediate.register.Register.YH;
import static com.hahn.basic.intermediate.register.Register.YL;

import com.hahn.basic.intermediate.FuncHead;
import com.hahn.basic.intermediate.library.base.Library;
import com.hahn.basic.intermediate.objects.types.Type;
import com.hahn.basic.intermediate.register.StackRegisterSnapshot;
import com.hahn.basic.target.LangBuildTarget;
import com.hahn.basic.target.asm.raw.ASMCommand;
import com.hahn.basic.target.asm.raw.ASMInlineLabel;
import com.hahn.basic.target.asm.raw.ASMLabel;
import com.hahn.basic.target.asm.raw.ASMLiteral;
import com.hahn.basic.target.asm.raw.ASMPointer;
import com.hahn.basic.target.asm.raw.ASMSpecial;
import com.hahn.basic.util.Util;

public class Common extends Library {
    public static final FuncHead ALLOC = new FuncHead("alloc", null, Type.UNDEFINED, Util.toParams(Type.UINT)),
                               DEALLOC = new FuncHead("dealloc", null, Type.BOOL, Util.toParams(Type.UNDEFINED)),
                             ARR_ALLOC = new FuncHead("arr_alloc", null, Type.UNDEFINED, Util.toParams(Type.UINT));

    public Common() {
        super("com.hahn.common");
    }

    @Override
    public void define() {
        // Functions are hidden
    }
    
    @Override
    public void defineASM(LangBuildTarget b) {
        ASMSpecial.toBytecode(b, CONST, "com.hahn.common.BITMAP_SIZE", 128);
        ASMSpecial.toBytecode(b, CONST, "com.hahn.common.BITMAP_START", 0x7F80);
        ASMSpecial.toBytecode(b, CONST, "com.hahn.common.HEAP_START", 0x8000);
        ASMSpecial.toBytecode(b, CONST, "com.hahn.common.BLOCK_SIZE", 16);
        ASMSpecial.toBytecode(b, CONST, "com.hahn.common.BLOCK_SIZE_2", 4);
        ASMSpecial.toBytecode(b, CONST, "com.hahn.common.LGBLOCK_SIZE", 256);
        ASMSpecial.toBytecode(b, CONST, "com.hahn.common.LGBLOCK_SIZE_2", 8);
        ASMLabel.add("@func_arr_alloc@uint", b);
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new StackRegisterSnapshot(1)));
        ASMCommand.toBytecode(b, ADD, A, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, PUSH, new ASMInlineLabel("@func_arr_alloc@uint@rtn_@func_alloc@uint"));
        ASMCommand.toBytecode(b, SET, PUSH, A);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint"));
        ASMLabel.add("@func_arr_alloc@uint@rtn_@func_alloc@uint", b);
        ASMCommand.toBytecode(b, SET, A, EX);
        ASMCommand.toBytecode(b, SET, new ASMPointer(A), new ASMPointer(new StackRegisterSnapshot(1)));
        ASMCommand.toBytecode(b, SET, A, POP);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_alloc@uint", b);
        ASMCommand.toBytecode(b, PUSHA);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new StackRegisterSnapshot(8)));
        ASMCommand.toBytecode(b, SET, B, new ASMInlineLabel("com.hahn.common.BITMAP_START"));
        ASMCommand.toBytecode(b, SET, YL, ASMLiteral.ZERO);
        ASMLabel.add("@func_alloc@uint@find_word", b);
        ASMCommand.toBytecode(b, SET, C, new ASMPointer(B));
        ASMCommand.toBytecode(b, SET, XL, ASMLiteral.ZERO);
        ASMLabel.add("@func_alloc@uint@find_bit", b);
        ASMCommand.toBytecode(b, SET, XH, C);
        ASMCommand.toBytecode(b, SHR, XH, XL);
        ASMCommand.toBytecode(b, AND, XH, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, IFE, XH, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, ADD, YL, new ASMInlineLabel("com.hahn.common.BLOCK_SIZE"));
        ASMCommand.toBytecode(b, IFP, YL, A);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@found"));
        ASMCommand.toBytecode(b, IFN, XH, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, SET, YL, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, ADD, XL, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, IFL, XL, ASMLiteral.SIXTEEN);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@find_bit"));
        ASMCommand.toBytecode(b, ADD, B, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, IFL, B, new ASMInlineLabel("com.hahn.common.BITMAP_SIZE"));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@find_word"));
        ASMCommand.toBytecode(b, SET, I, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@not_found"));
        ASMLabel.add("@func_alloc@uint@found", b);
        ASMLabel.add("@func_alloc@uint@tostart_word", b);
        ASMCommand.toBytecode(b, IFL, A, new ASMInlineLabel("com.hahn.common.LGBLOCK_SIZE"));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@tostart_word_end"));
        ASMCommand.toBytecode(b, SET, new ASMPointer(B), ASMLiteral.FFFF);
        ASMCommand.toBytecode(b, SUB, B, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SUB, A, new ASMInlineLabel("com.hahn.common.LGBLOCK_SIZE"));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@tostart_word"));
        ASMLabel.add("@func_alloc@uint@tostart_word_end", b);
        ASMCommand.toBytecode(b, ADD, XL, ASMLiteral.ONE);
        ASMLabel.add("@func_alloc@uint@tostart_bit", b);
        ASMCommand.toBytecode(b, IFL, A, new ASMInlineLabel("com.hahn.common.BLOCK_SIZE"));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@tostart_bit_end"));
        ASMCommand.toBytecode(b, SUB, XL, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SUB, A, new ASMInlineLabel("com.hahn.common.BLOCK_SIZE"));
        ASMCommand.toBytecode(b, SET, C, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SHL, C, XL);
        ASMCommand.toBytecode(b, BOR, new ASMPointer(B), C);
        ASMCommand.toBytecode(b, IFG, XL, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@tostart_bit"));
        ASMCommand.toBytecode(b, SUB, B, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, XL, ASMLiteral.SIXTEEN);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@tostart_bit"));
        ASMLabel.add("@func_alloc@uint@tostart_bit_end", b);
        ASMCommand.toBytecode(b, IFE, A, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@mark_done"));
        ASMCommand.toBytecode(b, SUB, XL, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, C, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SHL, C, XL);
        ASMCommand.toBytecode(b, BOR, new ASMPointer(B), C);
        ASMLabel.add("@func_alloc@uint@mark_done", b);
        ASMCommand.toBytecode(b, SET, YH, new ASMInlineLabel("com.hahn.common.HEAP_START"));
        ASMCommand.toBytecode(b, SUB, B, new ASMInlineLabel("com.hahn.common.BITMAP_START"));
        ASMCommand.toBytecode(b, SHL, B, new ASMInlineLabel("com.hahn.common.LGBLOCK_SIZE_2"));
        ASMCommand.toBytecode(b, ADD, YH, B);
        ASMCommand.toBytecode(b, SHL, XL, new ASMInlineLabel("com.hahn.common.BLOCK_SIZE_2"));
        ASMCommand.toBytecode(b, ADD, YH, XL);
        ASMCommand.toBytecode(b, SET, I, YH);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new StackRegisterSnapshot(8)));
        ASMLabel.add("@func_alloc@uint@clear", b);
        ASMCommand.toBytecode(b, SET, new ASMPointer(YH), ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, ADD, YH, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SUB, A, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, IFG, A, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_alloc@uint@clear"));
        ASMLabel.add("@func_alloc@uint@not_found", b);
        ASMCommand.toBytecode(b, SET, EX, I);
        ASMCommand.toBytecode(b, POPA);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_dealloc@undefined", b);
        ASMCommand.toBytecode(b, PUSHA);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new StackRegisterSnapshot(8)));
        ASMCommand.toBytecode(b, IFP, A, new ASMInlineLabel("com.hahn.common.HEAP_START"));
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_dealloc@undefined@start"));
        ASMLabel.add("@func_dealloc@undefined@failed", b);
        ASMCommand.toBytecode(b, POPA);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, EX, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, SET, PC, POP);
        ASMLabel.add("@func_dealloc@undefined@start", b);
        ASMCommand.toBytecode(b, SET, B, new ASMPointer(A));
        ASMCommand.toBytecode(b, SET, C, B);
        ASMCommand.toBytecode(b, SHR, C, new ASMInlineLabel("com.hahn.common.BLOCK_SIZE_2"));
        ASMCommand.toBytecode(b, SET, XL, C);
        ASMCommand.toBytecode(b, SHL, XL, new ASMInlineLabel("com.hahn.common.BLOCK_SIZE_2"));
        ASMCommand.toBytecode(b, SUB, B, XL);
        ASMCommand.toBytecode(b, IFG, B, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, ADD, C, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SUB, A, new ASMInlineLabel("com.hahn.common.HEAP_START"));
        ASMCommand.toBytecode(b, SET, B, A);
        ASMCommand.toBytecode(b, SHR, B, new ASMInlineLabel("com.hahn.common.BLOCK_SIZE_2"));
        ASMCommand.toBytecode(b, SET, XL, B);
        ASMCommand.toBytecode(b, SHL, XL, new ASMInlineLabel("com.hahn.common.BLOCK_SIZE_2"));
        ASMCommand.toBytecode(b, SUB, A, XL);
        ASMCommand.toBytecode(b, ADD, B, new ASMInlineLabel("com.hahn.common.BITMAP_START"));
        ASMLabel.add("@func_dealloc@undefined@clear_words", b);
        ASMCommand.toBytecode(b, SET, XL, new ASMPointer(B));
        ASMLabel.add("@func_dealloc@undefined@clear_bits", b);
        ASMCommand.toBytecode(b, IFE, C, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_dealloc@undefined@finished"));
        ASMCommand.toBytecode(b, SET, XH, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SHL, XH, A);
        ASMCommand.toBytecode(b, XOR, XH, ASMLiteral.FFFF);
        ASMCommand.toBytecode(b, AND, new ASMPointer(B), XH);
        ASMCommand.toBytecode(b, SUB, C, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, ADD, A, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, IFL, A, ASMLiteral.SIXTEEN);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_dealloc@undefined@clear_bits"));
        ASMCommand.toBytecode(b, ADD, B, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, A, ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, MOV, new ASMInlineLabel("@func_dealloc@undefined@clear_words"));
        ASMLabel.add("@func_dealloc@undefined@finished", b);
        ASMCommand.toBytecode(b, SET, A, new ASMPointer(new StackRegisterSnapshot(8)));
        ASMCommand.toBytecode(b, SET, new ASMPointer(A), ASMLiteral.ZERO);
        ASMCommand.toBytecode(b, SET, EX, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, POPA);
        ASMCommand.toBytecode(b, SPA, ASMLiteral.ONE);
        ASMCommand.toBytecode(b, SET, PC, POP);
    }
}
